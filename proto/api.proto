syntax = "proto3";

package example;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
option go_package = "/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    security_definitions: {
        security: {
                key: "bearer"
                value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
                description: "Authentication token, prefixed by Bearer: Bearer <token>"
            }
        }
    }
    security: {
        security_requirement: {
            key: "bearer"
        }
    }
};

// Define your service
service ExampleService {
    rpc GetExample (ExampleRequest2) returns (ExampleResponse2) {
        option (google.api.http) = {
            get: "/api/example"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {} // Disable security key
            tags: ["Utility"]
            summary: "Health Check"
            description: "This API for check server's health"
        };

    }

	rpc RegisterUser(RegisterUserRequest)returns(RegisterUserResponse){
		option (google.api.http) = {
            post: "/api/register"
			body: "*"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {} // Disable security key
            tags: ["User"]
            summary: "Register User"
            description: "This API for register new user"
        };
	}

	rpc LoginUser(LoginUserRequest)returns(LoginUserResponse){
		option (google.api.http) = {
            post: "/api/login"
			body: "*"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {} // Disable security key
            tags: ["User"]
            summary: "Login User"
            description: "This API for login user"
        };
	}

	rpc GetUserAll(Empty)returns(GetUserResponse){
		option (google.api.http) = {
            get: "/api/user"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["User"]
            summary: "get User"
            description: "This API for get user all"
        };
	}

	rpc CreateCrops(Crops)returns(GlobalResponse){
		option (google.api.http) = {
            post: "/api/create-crops"
			body:"*"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Crops"]
            summary: "create crops"
            description: "This API for create crops"
        };
	}	

	rpc GetCropsAll(Empty)returns(CropsResponse){
		option (google.api.http) = {
            get: "/api/get-crops-all"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Crops"]
            summary: "get crops"
            description: "This API for get crops all"
        };
	}	
	rpc GetCropsDetail(CropsDetailRequest)returns(CropsDetailResponse){
		option (google.api.http) = {
            get: "/api/get-crops-detail"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Crops"]
            summary: "get crops"
            description: "This API for get crops detail"
        };
	}
	
	rpc UpdateCropsDetail(Crops)returns(GlobalResponse){
		option (google.api.http) = {
            post: "/api/update-crops-detail"
			body:"*"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Crops"]
            summary: "update crops"
            description: "This API for update crops detail"
        };
	}
	
	rpc DeleteCropsDetail(DeleteCropsRequest)returns(GlobalResponse){
		option (google.api.http) = {
            delete: "/api/delete-crops-detail"
        };
		 option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Crops"]
            summary: "delete crops"
            description: "This API for delete crops detail"
        };
	}
}

// Define request and response messages
message ExampleRequest2 {
    string name = 1;
}

message ExampleResponse2 {
    string message = 1;
}

message RegisterUserRequest{
	string name = 1;
	string email = 2;
	string password = 3;
	string address = 4;
	string land_area = 5;
	string type_of_livestock = 6;
}

message RegisterUserResponse{
	int64 id = 1;
	int32 status = 2;
	bool fail = 3;
	string message = 4;
	string token = 5;
}

message LoginUserRequest{
	string email = 1;
	string password = 2;
}

message LoginUserResponse{
	string token = 1;
	int64 status = 2;
	bool fail = 3;
	string message = 4;
}

message Empty {}

message GetUserResponse{
	int32 status = 1;
	bool fail = 2;
	string message = 3;
	repeated User data = 4;
}

message User{
	int64 id =1;
	string name = 2;
	string role = 3;
	string email = 4;
	string address = 5;
	string land_area = 6;
	string type_of_livestock = 7;
}

message Crops{
	int64 id = 1;
	string jenis = 2;
	string umur = 3;
	string luas_lahan = 4;
	string pupuk_kimia = 5;
	string pupuk_organik = 6;
	string pengendalian_hama = 7;
	string kebutuhan_air = 8;
}

message GlobalResponse{
	int32 status = 1;
	bool failed = 2;
	string message = 3;
}

message CropsResponse{
	int32 status = 1;
	bool failed = 2;
	string message = 3;
	repeated CropsAll data = 4;

}

message CropsAll{
	string reference = 1;
	string jenis_tumbuhan = 2;
	string umur = 3;
	string nama_user = 4;
	int64 id =5;
}

message CropsDetailRequest{
	string reference=1;
}

message CropsDetailResponse{
	int32 status = 1;
	bool failed = 2;
	string message = 3;
	CropDetail data = 4;
}

message CropDetail{
	string reference = 1;
	string jenis= 2;
	string umur = 3;
	string luas_lahan = 4;
	string kebutuhan_pupuk_kimia = 5;
	string kebutuhan_pupuk_organik = 6;
	string kebutuhan_pengendalian_hama = 7;
	string kebutuhan_air = 8;
	int64 id =9;
}

message DeleteCropsRequest{
	int64 id = 1;
}