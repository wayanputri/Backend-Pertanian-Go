// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleService_GetExample_FullMethodName        = "/example.ExampleService/GetExample"
	ExampleService_RegisterUser_FullMethodName      = "/example.ExampleService/RegisterUser"
	ExampleService_LoginUser_FullMethodName         = "/example.ExampleService/LoginUser"
	ExampleService_GetUserAll_FullMethodName        = "/example.ExampleService/GetUserAll"
	ExampleService_GetUserProfile_FullMethodName    = "/example.ExampleService/GetUserProfile"
	ExampleService_CreateCrops_FullMethodName       = "/example.ExampleService/CreateCrops"
	ExampleService_GetCropsAll_FullMethodName       = "/example.ExampleService/GetCropsAll"
	ExampleService_GetCropsDetail_FullMethodName    = "/example.ExampleService/GetCropsDetail"
	ExampleService_UpdateCropsDetail_FullMethodName = "/example.ExampleService/UpdateCropsDetail"
	ExampleService_DeleteCropsDetail_FullMethodName = "/example.ExampleService/DeleteCropsDetail"
)

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleServiceClient interface {
	GetExample(ctx context.Context, in *ExampleRequest2, opts ...grpc.CallOption) (*ExampleResponse2, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	GetUserAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUserProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	CreateCrops(ctx context.Context, in *Crops, opts ...grpc.CallOption) (*GlobalResponse, error)
	GetCropsAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CropsResponse, error)
	GetCropsDetail(ctx context.Context, in *CropsDetailRequest, opts ...grpc.CallOption) (*CropsDetailResponse, error)
	UpdateCropsDetail(ctx context.Context, in *Crops, opts ...grpc.CallOption) (*GlobalResponse, error)
	DeleteCropsDetail(ctx context.Context, in *DeleteCropsRequest, opts ...grpc.CallOption) (*GlobalResponse, error)
}

type exampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleServiceClient(cc grpc.ClientConnInterface) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) GetExample(ctx context.Context, in *ExampleRequest2, opts ...grpc.CallOption) (*ExampleResponse2, error) {
	out := new(ExampleResponse2)
	err := c.cc.Invoke(ctx, ExampleService_GetExample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, ExampleService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, ExampleService_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetUserAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, ExampleService_GetUserAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetUserProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, ExampleService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) CreateCrops(ctx context.Context, in *Crops, opts ...grpc.CallOption) (*GlobalResponse, error) {
	out := new(GlobalResponse)
	err := c.cc.Invoke(ctx, ExampleService_CreateCrops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetCropsAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CropsResponse, error) {
	out := new(CropsResponse)
	err := c.cc.Invoke(ctx, ExampleService_GetCropsAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetCropsDetail(ctx context.Context, in *CropsDetailRequest, opts ...grpc.CallOption) (*CropsDetailResponse, error) {
	out := new(CropsDetailResponse)
	err := c.cc.Invoke(ctx, ExampleService_GetCropsDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) UpdateCropsDetail(ctx context.Context, in *Crops, opts ...grpc.CallOption) (*GlobalResponse, error) {
	out := new(GlobalResponse)
	err := c.cc.Invoke(ctx, ExampleService_UpdateCropsDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) DeleteCropsDetail(ctx context.Context, in *DeleteCropsRequest, opts ...grpc.CallOption) (*GlobalResponse, error) {
	out := new(GlobalResponse)
	err := c.cc.Invoke(ctx, ExampleService_DeleteCropsDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServiceServer is the server API for ExampleService service.
// All implementations must embed UnimplementedExampleServiceServer
// for forward compatibility
type ExampleServiceServer interface {
	GetExample(context.Context, *ExampleRequest2) (*ExampleResponse2, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	GetUserAll(context.Context, *Empty) (*GetUserResponse, error)
	GetUserProfile(context.Context, *Empty) (*GetUserProfileResponse, error)
	CreateCrops(context.Context, *Crops) (*GlobalResponse, error)
	GetCropsAll(context.Context, *Empty) (*CropsResponse, error)
	GetCropsDetail(context.Context, *CropsDetailRequest) (*CropsDetailResponse, error)
	UpdateCropsDetail(context.Context, *Crops) (*GlobalResponse, error)
	DeleteCropsDetail(context.Context, *DeleteCropsRequest) (*GlobalResponse, error)
	mustEmbedUnimplementedExampleServiceServer()
}

// UnimplementedExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (UnimplementedExampleServiceServer) GetExample(context.Context, *ExampleRequest2) (*ExampleResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExample not implemented")
}
func (UnimplementedExampleServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedExampleServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedExampleServiceServer) GetUserAll(context.Context, *Empty) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAll not implemented")
}
func (UnimplementedExampleServiceServer) GetUserProfile(context.Context, *Empty) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedExampleServiceServer) CreateCrops(context.Context, *Crops) (*GlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrops not implemented")
}
func (UnimplementedExampleServiceServer) GetCropsAll(context.Context, *Empty) (*CropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCropsAll not implemented")
}
func (UnimplementedExampleServiceServer) GetCropsDetail(context.Context, *CropsDetailRequest) (*CropsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCropsDetail not implemented")
}
func (UnimplementedExampleServiceServer) UpdateCropsDetail(context.Context, *Crops) (*GlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCropsDetail not implemented")
}
func (UnimplementedExampleServiceServer) DeleteCropsDetail(context.Context, *DeleteCropsRequest) (*GlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCropsDetail not implemented")
}
func (UnimplementedExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {}

// UnsafeExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServiceServer will
// result in compilation errors.
type UnsafeExampleServiceServer interface {
	mustEmbedUnimplementedExampleServiceServer()
}

func RegisterExampleServiceServer(s grpc.ServiceRegistrar, srv ExampleServiceServer) {
	s.RegisterService(&ExampleService_ServiceDesc, srv)
}

func _ExampleService_GetExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_GetExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetExample(ctx, req.(*ExampleRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_GetUserAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetUserAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetUserProfile(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_CreateCrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crops)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).CreateCrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_CreateCrops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).CreateCrops(ctx, req.(*Crops))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetCropsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetCropsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_GetCropsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetCropsAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetCropsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CropsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetCropsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_GetCropsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetCropsDetail(ctx, req.(*CropsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_UpdateCropsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crops)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).UpdateCropsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_UpdateCropsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).UpdateCropsDetail(ctx, req.(*Crops))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_DeleteCropsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).DeleteCropsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_DeleteCropsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).DeleteCropsDetail(ctx, req.(*DeleteCropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleService_ServiceDesc is the grpc.ServiceDesc for ExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExample",
			Handler:    _ExampleService_GetExample_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _ExampleService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _ExampleService_LoginUser_Handler,
		},
		{
			MethodName: "GetUserAll",
			Handler:    _ExampleService_GetUserAll_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _ExampleService_GetUserProfile_Handler,
		},
		{
			MethodName: "CreateCrops",
			Handler:    _ExampleService_CreateCrops_Handler,
		},
		{
			MethodName: "GetCropsAll",
			Handler:    _ExampleService_GetCropsAll_Handler,
		},
		{
			MethodName: "GetCropsDetail",
			Handler:    _ExampleService_GetCropsDetail_Handler,
		},
		{
			MethodName: "UpdateCropsDetail",
			Handler:    _ExampleService_UpdateCropsDetail_Handler,
		},
		{
			MethodName: "DeleteCropsDetail",
			Handler:    _ExampleService_DeleteCropsDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
